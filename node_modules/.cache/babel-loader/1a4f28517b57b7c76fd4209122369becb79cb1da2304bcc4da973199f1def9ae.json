{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction iterate(files, cb) {\n  Array.prototype.forEach.call(files, cb);\n}\nfunction getTotalFileSize(files) {\n  var result = 0;\n  iterate(files, function (file) {\n    return result += file.size;\n  });\n  return result;\n}\nfunction getFileExtension(filename) {\n  return filename.substr((~-filename.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n}\nvar FileValidator = {\n  extend: function extend(name, fn) {\n    this[name] = fn;\n  },\n  /**\n   * Returns `true` if there are no files in file list\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isEmpty: function isEmpty(files) {\n    return files.length === 0;\n  },\n  /**\n   * Returns `true` if files count equals to 1\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isSingle: function isSingle(files) {\n    return files.length === 1;\n  },\n  /**\n   * Returns `true` if files count is more than 1\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isMultiple: function isMultiple(files) {\n    return files.length > 1;\n  },\n  /**\n   * Returns `true` if files count is within allowed range.\n   * If `max` is not supplied, checks if files count equals `min`.\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum files count\n   * @param {Number} [max] Maximum files count\n   * @returns {Boolean}\n   */\n  isFilesCount: function isFilesCount(files, min, max) {\n    if (!max) {\n      return files.length === min;\n    } else {\n      return files.length >= min && files.length <= max;\n    }\n  },\n  /**\n   * Returns `true` if total size of all files is within allowed range.\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum size\n   * @param {Number} [max] Maximum size\n   * @returns {Boolean}\n   */\n  isTotalSize: function isTotalSize(files, min, max) {\n    var totalSize = getTotalFileSize(files);\n    return totalSize >= min && (!max || totalSize <= max);\n  },\n  /**\n   * Returns `true` if each file's size is within allowed range\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum size\n   * @param {Number} [max] Maximum size\n   * @returns {Boolean}\n   */\n  isEachFileSize: function isEachFileSize(files, min, max) {\n    var allValid = true;\n    iterate(files, function (file) {\n      var fileValid = file.size >= min && (!max || file.size <= max);\n      if (!fileValid) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  },\n  /**\n   * Returns `true` if each file's extension is in the `extensions` array\n   *\n   * @param {FileList} files File list\n   * @param {Array} extensions Array of allowed file extensions. All extensions must be lower-case.\n   * @returns {Boolean}\n   */\n  isExtension: function isExtension(files, extensions) {\n    var allValid = true;\n    iterate(files, function (file) {\n      var ext = getFileExtension(file.name);\n      if (extensions.indexOf(ext) === -1) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  },\n  /**\n   * Returns `true` if each file's mime type is in the `types` array\n   *\n   * @param {FileList} files File list\n   * @param {Array} types Array of allowed mime types\n   * @returns {Boolean}\n   */\n  isType: function isType(files, types) {\n    var allValid = true;\n    iterate(files, function (file) {\n      if (types.indexOf(file.type) === -1) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  }\n};\nexports['default'] = FileValidator;\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","iterate","files","cb","Array","prototype","forEach","call","getTotalFileSize","result","file","size","getFileExtension","filename","substr","lastIndexOf","toLowerCase","FileValidator","extend","name","fn","isEmpty","length","isSingle","isMultiple","isFilesCount","min","max","isTotalSize","totalSize","isEachFileSize","allValid","fileValid","isExtension","extensions","ext","indexOf","isType","types","type","module"],"sources":["C:/Users/VIGGU/codes/REACT JS/textutils/node_modules/react-bootstrap-validation/lib/FileValidator.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nfunction iterate(files, cb) {\n    Array.prototype.forEach.call(files, cb);\n}\n\nfunction getTotalFileSize(files) {\n    var result = 0;\n\n    iterate(files, function (file) {\n        return result += file.size;\n    });\n\n    return result;\n}\n\nfunction getFileExtension(filename) {\n    return filename.substr((~ -filename.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n}\n\nvar FileValidator = {\n    extend: function extend(name, fn) {\n        this[name] = fn;\n    },\n\n    /**\n     * Returns `true` if there are no files in file list\n     *\n     * @param {FileList} files File list\n     * @returns {Boolean}\n     */\n    isEmpty: function isEmpty(files) {\n        return files.length === 0;\n    },\n\n    /**\n     * Returns `true` if files count equals to 1\n     *\n     * @param {FileList} files File list\n     * @returns {Boolean}\n     */\n    isSingle: function isSingle(files) {\n        return files.length === 1;\n    },\n\n    /**\n     * Returns `true` if files count is more than 1\n     *\n     * @param {FileList} files File list\n     * @returns {Boolean}\n     */\n    isMultiple: function isMultiple(files) {\n        return files.length > 1;\n    },\n\n    /**\n     * Returns `true` if files count is within allowed range.\n     * If `max` is not supplied, checks if files count equals `min`.\n     *\n     * @param {FileList} files File list\n     * @param {Number} min Minimum files count\n     * @param {Number} [max] Maximum files count\n     * @returns {Boolean}\n     */\n    isFilesCount: function isFilesCount(files, min, max) {\n        if (!max) {\n            return files.length === min;\n        } else {\n            return files.length >= min && files.length <= max;\n        }\n    },\n\n    /**\n     * Returns `true` if total size of all files is within allowed range.\n     *\n     * @param {FileList} files File list\n     * @param {Number} min Minimum size\n     * @param {Number} [max] Maximum size\n     * @returns {Boolean}\n     */\n    isTotalSize: function isTotalSize(files, min, max) {\n        var totalSize = getTotalFileSize(files);\n\n        return totalSize >= min && (!max || totalSize <= max);\n    },\n\n    /**\n     * Returns `true` if each file's size is within allowed range\n     *\n     * @param {FileList} files File list\n     * @param {Number} min Minimum size\n     * @param {Number} [max] Maximum size\n     * @returns {Boolean}\n     */\n    isEachFileSize: function isEachFileSize(files, min, max) {\n        var allValid = true;\n\n        iterate(files, function (file) {\n            var fileValid = file.size >= min && (!max || file.size <= max);\n\n            if (!fileValid) {\n                allValid = false;\n            }\n        });\n\n        return allValid;\n    },\n\n    /**\n     * Returns `true` if each file's extension is in the `extensions` array\n     *\n     * @param {FileList} files File list\n     * @param {Array} extensions Array of allowed file extensions. All extensions must be lower-case.\n     * @returns {Boolean}\n     */\n    isExtension: function isExtension(files, extensions) {\n        var allValid = true;\n\n        iterate(files, function (file) {\n            var ext = getFileExtension(file.name);\n\n            if (extensions.indexOf(ext) === -1) {\n                allValid = false;\n            }\n        });\n\n        return allValid;\n    },\n\n    /**\n     * Returns `true` if each file's mime type is in the `types` array\n     *\n     * @param {FileList} files File list\n     * @param {Array} types Array of allowed mime types\n     * @returns {Boolean}\n     */\n    isType: function isType(files, types) {\n        var allValid = true;\n\n        iterate(files, function (file) {\n            if (types.indexOf(file.type) === -1) {\n                allValid = false;\n            }\n        });\n\n        return allValid;\n    }\n};\n\nexports['default'] = FileValidator;\nmodule.exports = exports['default'];"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}